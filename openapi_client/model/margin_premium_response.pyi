# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MarginPremiumResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Symbol = schemas.StrSchema
            
            
            class GeneralMargin(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        MarginPremiumType = schemas.Int32Schema
                        MarginPremium = schemas.Float64Schema
                        UpperMarginPremium = schemas.Float64Schema
                        LowerMarginPremium = schemas.Float64Schema
                        TickMarginPremium = schemas.Float64Schema
                        __annotations__ = {
                            "MarginPremiumType": MarginPremiumType,
                            "MarginPremium": MarginPremium,
                            "UpperMarginPremium": UpperMarginPremium,
                            "LowerMarginPremium": LowerMarginPremium,
                            "TickMarginPremium": TickMarginPremium,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MarginPremiumType"]) -> MetaOapg.properties.MarginPremiumType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MarginPremium"]) -> MetaOapg.properties.MarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["UpperMarginPremium"]) -> MetaOapg.properties.UpperMarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["LowerMarginPremium"]) -> MetaOapg.properties.LowerMarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["TickMarginPremium"]) -> MetaOapg.properties.TickMarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["MarginPremiumType", "MarginPremium", "UpperMarginPremium", "LowerMarginPremium", "TickMarginPremium", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MarginPremiumType"]) -> typing.Union[MetaOapg.properties.MarginPremiumType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MarginPremium"]) -> typing.Union[MetaOapg.properties.MarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["UpperMarginPremium"]) -> typing.Union[MetaOapg.properties.UpperMarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["LowerMarginPremium"]) -> typing.Union[MetaOapg.properties.LowerMarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["TickMarginPremium"]) -> typing.Union[MetaOapg.properties.TickMarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MarginPremiumType", "MarginPremium", "UpperMarginPremium", "LowerMarginPremium", "TickMarginPremium", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    MarginPremiumType: typing.Union[MetaOapg.properties.MarginPremiumType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    MarginPremium: typing.Union[MetaOapg.properties.MarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    UpperMarginPremium: typing.Union[MetaOapg.properties.UpperMarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    LowerMarginPremium: typing.Union[MetaOapg.properties.LowerMarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    TickMarginPremium: typing.Union[MetaOapg.properties.TickMarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'GeneralMargin':
                    return super().__new__(
                        cls,
                        *_args,
                        MarginPremiumType=MarginPremiumType,
                        MarginPremium=MarginPremium,
                        UpperMarginPremium=UpperMarginPremium,
                        LowerMarginPremium=LowerMarginPremium,
                        TickMarginPremium=TickMarginPremium,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class DayTrade(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        MarginPremiumType = schemas.Int32Schema
                        MarginPremium = schemas.Float64Schema
                        UpperMarginPremium = schemas.Float64Schema
                        LowerMarginPremium = schemas.Float64Schema
                        TickMarginPremium = schemas.Float64Schema
                        __annotations__ = {
                            "MarginPremiumType": MarginPremiumType,
                            "MarginPremium": MarginPremium,
                            "UpperMarginPremium": UpperMarginPremium,
                            "LowerMarginPremium": LowerMarginPremium,
                            "TickMarginPremium": TickMarginPremium,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MarginPremiumType"]) -> MetaOapg.properties.MarginPremiumType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["MarginPremium"]) -> MetaOapg.properties.MarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["UpperMarginPremium"]) -> MetaOapg.properties.UpperMarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["LowerMarginPremium"]) -> MetaOapg.properties.LowerMarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["TickMarginPremium"]) -> MetaOapg.properties.TickMarginPremium: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["MarginPremiumType", "MarginPremium", "UpperMarginPremium", "LowerMarginPremium", "TickMarginPremium", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MarginPremiumType"]) -> typing.Union[MetaOapg.properties.MarginPremiumType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["MarginPremium"]) -> typing.Union[MetaOapg.properties.MarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["UpperMarginPremium"]) -> typing.Union[MetaOapg.properties.UpperMarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["LowerMarginPremium"]) -> typing.Union[MetaOapg.properties.LowerMarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["TickMarginPremium"]) -> typing.Union[MetaOapg.properties.TickMarginPremium, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["MarginPremiumType", "MarginPremium", "UpperMarginPremium", "LowerMarginPremium", "TickMarginPremium", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    MarginPremiumType: typing.Union[MetaOapg.properties.MarginPremiumType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    MarginPremium: typing.Union[MetaOapg.properties.MarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    UpperMarginPremium: typing.Union[MetaOapg.properties.UpperMarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    LowerMarginPremium: typing.Union[MetaOapg.properties.LowerMarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    TickMarginPremium: typing.Union[MetaOapg.properties.TickMarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'DayTrade':
                    return super().__new__(
                        cls,
                        *_args,
                        MarginPremiumType=MarginPremiumType,
                        MarginPremium=MarginPremium,
                        UpperMarginPremium=UpperMarginPremium,
                        LowerMarginPremium=LowerMarginPremium,
                        TickMarginPremium=TickMarginPremium,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "Symbol": Symbol,
                "GeneralMargin": GeneralMargin,
                "DayTrade": DayTrade,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Symbol"]) -> MetaOapg.properties.Symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GeneralMargin"]) -> MetaOapg.properties.GeneralMargin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DayTrade"]) -> MetaOapg.properties.DayTrade: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Symbol", "GeneralMargin", "DayTrade", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Symbol"]) -> typing.Union[MetaOapg.properties.Symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GeneralMargin"]) -> typing.Union[MetaOapg.properties.GeneralMargin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DayTrade"]) -> typing.Union[MetaOapg.properties.DayTrade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Symbol", "GeneralMargin", "DayTrade", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Symbol: typing.Union[MetaOapg.properties.Symbol, str, schemas.Unset] = schemas.unset,
        GeneralMargin: typing.Union[MetaOapg.properties.GeneralMargin, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        DayTrade: typing.Union[MetaOapg.properties.DayTrade, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MarginPremiumResponse':
        return super().__new__(
            cls,
            *_args,
            Symbol=Symbol,
            GeneralMargin=GeneralMargin,
            DayTrade=DayTrade,
            _configuration=_configuration,
            **kwargs,
        )
