# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BoardSuccess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    下記にあるBIDとASKとは、トレーダー目線から見た場合の値であるため、BidPrice=Sell1のPrice、AskPrice=Buy1のPriceという数値となります。
    """


    class MetaOapg:
        
        class properties:
            Symbol = schemas.StrSchema
            SymbolName = schemas.StrSchema
            Exchange = schemas.Int32Schema
            ExchangeName = schemas.StrSchema
            CurrentPrice = schemas.Float64Schema
            CurrentPriceTime = schemas.DateTimeSchema
            CurrentPriceChangeStatus = schemas.StrSchema
            CurrentPriceStatus = schemas.Int32Schema
            CalcPrice = schemas.Float64Schema
            PreviousClose = schemas.Float64Schema
            PreviousCloseTime = schemas.DateTimeSchema
            ChangePreviousClose = schemas.Float64Schema
            ChangePreviousClosePer = schemas.Float64Schema
            OpeningPrice = schemas.Float64Schema
            OpeningPriceTime = schemas.DateTimeSchema
            HighPrice = schemas.Float64Schema
            HighPriceTime = schemas.DateTimeSchema
            LowPrice = schemas.Float64Schema
            LowPriceTime = schemas.DateTimeSchema
            TradingVolume = schemas.Float64Schema
            TradingVolumeTime = schemas.DateTimeSchema
            VWAP = schemas.Float64Schema
            TradingValue = schemas.Float64Schema
            BidQty = schemas.Float64Schema
            BidPrice = schemas.Float64Schema
            BidTime = schemas.DateTimeSchema
            BidSign = schemas.StrSchema
            MarketOrderSellQty = schemas.Float64Schema
            
            
            class Sell1(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Time = schemas.DateTimeSchema
                        Sign = schemas.StrSchema
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Time": Time,
                            "Sign": Sign,
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Time"]) -> MetaOapg.properties.Time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Sign"]) -> MetaOapg.properties.Sign: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Time", "Sign", "Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Time"]) -> typing.Union[MetaOapg.properties.Time, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Sign"]) -> typing.Union[MetaOapg.properties.Sign, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Time", "Sign", "Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Time: typing.Union[MetaOapg.properties.Time, str, datetime, schemas.Unset] = schemas.unset,
                    Sign: typing.Union[MetaOapg.properties.Sign, str, schemas.Unset] = schemas.unset,
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell1':
                    return super().__new__(
                        cls,
                        *_args,
                        Time=Time,
                        Sign=Sign,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell2(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell2':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell3(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell3':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell4(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell4':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell5(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell5':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell6(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell6':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell7(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell7':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell8(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell8':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell9(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell9':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Sell10(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Sell10':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            AskQty = schemas.Float64Schema
            AskPrice = schemas.Float64Schema
            AskTime = schemas.DateTimeSchema
            AskSign = schemas.StrSchema
            MarketOrderBuyQty = schemas.Float64Schema
            
            
            class Buy1(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Time = schemas.DateTimeSchema
                        Sign = schemas.StrSchema
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Time": Time,
                            "Sign": Sign,
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Time"]) -> MetaOapg.properties.Time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Sign"]) -> MetaOapg.properties.Sign: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Time", "Sign", "Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Time"]) -> typing.Union[MetaOapg.properties.Time, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Sign"]) -> typing.Union[MetaOapg.properties.Sign, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Time", "Sign", "Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Time: typing.Union[MetaOapg.properties.Time, str, datetime, schemas.Unset] = schemas.unset,
                    Sign: typing.Union[MetaOapg.properties.Sign, str, schemas.Unset] = schemas.unset,
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy1':
                    return super().__new__(
                        cls,
                        *_args,
                        Time=Time,
                        Sign=Sign,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy2(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy2':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy3(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy3':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy4(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy4':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy5(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy5':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy6(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy6':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy7(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy7':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy8(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy8':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy9(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy9':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class Buy10(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        Price = schemas.Float64Schema
                        Qty = schemas.Float64Schema
                        __annotations__ = {
                            "Price": Price,
                            "Qty": Qty,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Price", "Qty", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Buy10':
                    return super().__new__(
                        cls,
                        *_args,
                        Price=Price,
                        Qty=Qty,
                        _configuration=_configuration,
                        **kwargs,
                    )
            OverSellQty = schemas.Float64Schema
            UnderBuyQty = schemas.Float64Schema
            TotalMarketValue = schemas.Float64Schema
            ClearingPrice = schemas.Float64Schema
            IV = schemas.Float64Schema
            Gamma = schemas.Float64Schema
            Theta = schemas.Float64Schema
            Vega = schemas.Float64Schema
            Delta = schemas.Float64Schema
            SecurityType = schemas.Int32Schema
            __annotations__ = {
                "Symbol": Symbol,
                "SymbolName": SymbolName,
                "Exchange": Exchange,
                "ExchangeName": ExchangeName,
                "CurrentPrice": CurrentPrice,
                "CurrentPriceTime": CurrentPriceTime,
                "CurrentPriceChangeStatus": CurrentPriceChangeStatus,
                "CurrentPriceStatus": CurrentPriceStatus,
                "CalcPrice": CalcPrice,
                "PreviousClose": PreviousClose,
                "PreviousCloseTime": PreviousCloseTime,
                "ChangePreviousClose": ChangePreviousClose,
                "ChangePreviousClosePer": ChangePreviousClosePer,
                "OpeningPrice": OpeningPrice,
                "OpeningPriceTime": OpeningPriceTime,
                "HighPrice": HighPrice,
                "HighPriceTime": HighPriceTime,
                "LowPrice": LowPrice,
                "LowPriceTime": LowPriceTime,
                "TradingVolume": TradingVolume,
                "TradingVolumeTime": TradingVolumeTime,
                "VWAP": VWAP,
                "TradingValue": TradingValue,
                "BidQty": BidQty,
                "BidPrice": BidPrice,
                "BidTime": BidTime,
                "BidSign": BidSign,
                "MarketOrderSellQty": MarketOrderSellQty,
                "Sell1": Sell1,
                "Sell2": Sell2,
                "Sell3": Sell3,
                "Sell4": Sell4,
                "Sell5": Sell5,
                "Sell6": Sell6,
                "Sell7": Sell7,
                "Sell8": Sell8,
                "Sell9": Sell9,
                "Sell10": Sell10,
                "AskQty": AskQty,
                "AskPrice": AskPrice,
                "AskTime": AskTime,
                "AskSign": AskSign,
                "MarketOrderBuyQty": MarketOrderBuyQty,
                "Buy1": Buy1,
                "Buy2": Buy2,
                "Buy3": Buy3,
                "Buy4": Buy4,
                "Buy5": Buy5,
                "Buy6": Buy6,
                "Buy7": Buy7,
                "Buy8": Buy8,
                "Buy9": Buy9,
                "Buy10": Buy10,
                "OverSellQty": OverSellQty,
                "UnderBuyQty": UnderBuyQty,
                "TotalMarketValue": TotalMarketValue,
                "ClearingPrice": ClearingPrice,
                "IV": IV,
                "Gamma": Gamma,
                "Theta": Theta,
                "Vega": Vega,
                "Delta": Delta,
                "SecurityType": SecurityType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Symbol"]) -> MetaOapg.properties.Symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SymbolName"]) -> MetaOapg.properties.SymbolName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Exchange"]) -> MetaOapg.properties.Exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExchangeName"]) -> MetaOapg.properties.ExchangeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrentPrice"]) -> MetaOapg.properties.CurrentPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrentPriceTime"]) -> MetaOapg.properties.CurrentPriceTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrentPriceChangeStatus"]) -> MetaOapg.properties.CurrentPriceChangeStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrentPriceStatus"]) -> MetaOapg.properties.CurrentPriceStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CalcPrice"]) -> MetaOapg.properties.CalcPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreviousClose"]) -> MetaOapg.properties.PreviousClose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreviousCloseTime"]) -> MetaOapg.properties.PreviousCloseTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ChangePreviousClose"]) -> MetaOapg.properties.ChangePreviousClose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ChangePreviousClosePer"]) -> MetaOapg.properties.ChangePreviousClosePer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OpeningPrice"]) -> MetaOapg.properties.OpeningPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OpeningPriceTime"]) -> MetaOapg.properties.OpeningPriceTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HighPrice"]) -> MetaOapg.properties.HighPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HighPriceTime"]) -> MetaOapg.properties.HighPriceTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LowPrice"]) -> MetaOapg.properties.LowPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LowPriceTime"]) -> MetaOapg.properties.LowPriceTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TradingVolume"]) -> MetaOapg.properties.TradingVolume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TradingVolumeTime"]) -> MetaOapg.properties.TradingVolumeTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VWAP"]) -> MetaOapg.properties.VWAP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TradingValue"]) -> MetaOapg.properties.TradingValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BidQty"]) -> MetaOapg.properties.BidQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BidPrice"]) -> MetaOapg.properties.BidPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BidTime"]) -> MetaOapg.properties.BidTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BidSign"]) -> MetaOapg.properties.BidSign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarketOrderSellQty"]) -> MetaOapg.properties.MarketOrderSellQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell1"]) -> MetaOapg.properties.Sell1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell2"]) -> MetaOapg.properties.Sell2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell3"]) -> MetaOapg.properties.Sell3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell4"]) -> MetaOapg.properties.Sell4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell5"]) -> MetaOapg.properties.Sell5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell6"]) -> MetaOapg.properties.Sell6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell7"]) -> MetaOapg.properties.Sell7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell8"]) -> MetaOapg.properties.Sell8: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell9"]) -> MetaOapg.properties.Sell9: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sell10"]) -> MetaOapg.properties.Sell10: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AskQty"]) -> MetaOapg.properties.AskQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AskPrice"]) -> MetaOapg.properties.AskPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AskTime"]) -> MetaOapg.properties.AskTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AskSign"]) -> MetaOapg.properties.AskSign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarketOrderBuyQty"]) -> MetaOapg.properties.MarketOrderBuyQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy1"]) -> MetaOapg.properties.Buy1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy2"]) -> MetaOapg.properties.Buy2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy3"]) -> MetaOapg.properties.Buy3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy4"]) -> MetaOapg.properties.Buy4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy5"]) -> MetaOapg.properties.Buy5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy6"]) -> MetaOapg.properties.Buy6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy7"]) -> MetaOapg.properties.Buy7: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy8"]) -> MetaOapg.properties.Buy8: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy9"]) -> MetaOapg.properties.Buy9: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Buy10"]) -> MetaOapg.properties.Buy10: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OverSellQty"]) -> MetaOapg.properties.OverSellQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UnderBuyQty"]) -> MetaOapg.properties.UnderBuyQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TotalMarketValue"]) -> MetaOapg.properties.TotalMarketValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClearingPrice"]) -> MetaOapg.properties.ClearingPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IV"]) -> MetaOapg.properties.IV: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Gamma"]) -> MetaOapg.properties.Gamma: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Theta"]) -> MetaOapg.properties.Theta: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Vega"]) -> MetaOapg.properties.Vega: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Delta"]) -> MetaOapg.properties.Delta: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SecurityType"]) -> MetaOapg.properties.SecurityType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Symbol", "SymbolName", "Exchange", "ExchangeName", "CurrentPrice", "CurrentPriceTime", "CurrentPriceChangeStatus", "CurrentPriceStatus", "CalcPrice", "PreviousClose", "PreviousCloseTime", "ChangePreviousClose", "ChangePreviousClosePer", "OpeningPrice", "OpeningPriceTime", "HighPrice", "HighPriceTime", "LowPrice", "LowPriceTime", "TradingVolume", "TradingVolumeTime", "VWAP", "TradingValue", "BidQty", "BidPrice", "BidTime", "BidSign", "MarketOrderSellQty", "Sell1", "Sell2", "Sell3", "Sell4", "Sell5", "Sell6", "Sell7", "Sell8", "Sell9", "Sell10", "AskQty", "AskPrice", "AskTime", "AskSign", "MarketOrderBuyQty", "Buy1", "Buy2", "Buy3", "Buy4", "Buy5", "Buy6", "Buy7", "Buy8", "Buy9", "Buy10", "OverSellQty", "UnderBuyQty", "TotalMarketValue", "ClearingPrice", "IV", "Gamma", "Theta", "Vega", "Delta", "SecurityType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Symbol"]) -> typing.Union[MetaOapg.properties.Symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SymbolName"]) -> typing.Union[MetaOapg.properties.SymbolName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Exchange"]) -> typing.Union[MetaOapg.properties.Exchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExchangeName"]) -> typing.Union[MetaOapg.properties.ExchangeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrentPrice"]) -> typing.Union[MetaOapg.properties.CurrentPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrentPriceTime"]) -> typing.Union[MetaOapg.properties.CurrentPriceTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrentPriceChangeStatus"]) -> typing.Union[MetaOapg.properties.CurrentPriceChangeStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrentPriceStatus"]) -> typing.Union[MetaOapg.properties.CurrentPriceStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CalcPrice"]) -> typing.Union[MetaOapg.properties.CalcPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreviousClose"]) -> typing.Union[MetaOapg.properties.PreviousClose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreviousCloseTime"]) -> typing.Union[MetaOapg.properties.PreviousCloseTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ChangePreviousClose"]) -> typing.Union[MetaOapg.properties.ChangePreviousClose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ChangePreviousClosePer"]) -> typing.Union[MetaOapg.properties.ChangePreviousClosePer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OpeningPrice"]) -> typing.Union[MetaOapg.properties.OpeningPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OpeningPriceTime"]) -> typing.Union[MetaOapg.properties.OpeningPriceTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HighPrice"]) -> typing.Union[MetaOapg.properties.HighPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HighPriceTime"]) -> typing.Union[MetaOapg.properties.HighPriceTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LowPrice"]) -> typing.Union[MetaOapg.properties.LowPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LowPriceTime"]) -> typing.Union[MetaOapg.properties.LowPriceTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TradingVolume"]) -> typing.Union[MetaOapg.properties.TradingVolume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TradingVolumeTime"]) -> typing.Union[MetaOapg.properties.TradingVolumeTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VWAP"]) -> typing.Union[MetaOapg.properties.VWAP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TradingValue"]) -> typing.Union[MetaOapg.properties.TradingValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BidQty"]) -> typing.Union[MetaOapg.properties.BidQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BidPrice"]) -> typing.Union[MetaOapg.properties.BidPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BidTime"]) -> typing.Union[MetaOapg.properties.BidTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BidSign"]) -> typing.Union[MetaOapg.properties.BidSign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarketOrderSellQty"]) -> typing.Union[MetaOapg.properties.MarketOrderSellQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell1"]) -> typing.Union[MetaOapg.properties.Sell1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell2"]) -> typing.Union[MetaOapg.properties.Sell2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell3"]) -> typing.Union[MetaOapg.properties.Sell3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell4"]) -> typing.Union[MetaOapg.properties.Sell4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell5"]) -> typing.Union[MetaOapg.properties.Sell5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell6"]) -> typing.Union[MetaOapg.properties.Sell6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell7"]) -> typing.Union[MetaOapg.properties.Sell7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell8"]) -> typing.Union[MetaOapg.properties.Sell8, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell9"]) -> typing.Union[MetaOapg.properties.Sell9, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sell10"]) -> typing.Union[MetaOapg.properties.Sell10, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AskQty"]) -> typing.Union[MetaOapg.properties.AskQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AskPrice"]) -> typing.Union[MetaOapg.properties.AskPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AskTime"]) -> typing.Union[MetaOapg.properties.AskTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AskSign"]) -> typing.Union[MetaOapg.properties.AskSign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarketOrderBuyQty"]) -> typing.Union[MetaOapg.properties.MarketOrderBuyQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy1"]) -> typing.Union[MetaOapg.properties.Buy1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy2"]) -> typing.Union[MetaOapg.properties.Buy2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy3"]) -> typing.Union[MetaOapg.properties.Buy3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy4"]) -> typing.Union[MetaOapg.properties.Buy4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy5"]) -> typing.Union[MetaOapg.properties.Buy5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy6"]) -> typing.Union[MetaOapg.properties.Buy6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy7"]) -> typing.Union[MetaOapg.properties.Buy7, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy8"]) -> typing.Union[MetaOapg.properties.Buy8, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy9"]) -> typing.Union[MetaOapg.properties.Buy9, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Buy10"]) -> typing.Union[MetaOapg.properties.Buy10, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OverSellQty"]) -> typing.Union[MetaOapg.properties.OverSellQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UnderBuyQty"]) -> typing.Union[MetaOapg.properties.UnderBuyQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TotalMarketValue"]) -> typing.Union[MetaOapg.properties.TotalMarketValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClearingPrice"]) -> typing.Union[MetaOapg.properties.ClearingPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IV"]) -> typing.Union[MetaOapg.properties.IV, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Gamma"]) -> typing.Union[MetaOapg.properties.Gamma, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Theta"]) -> typing.Union[MetaOapg.properties.Theta, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Vega"]) -> typing.Union[MetaOapg.properties.Vega, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Delta"]) -> typing.Union[MetaOapg.properties.Delta, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SecurityType"]) -> typing.Union[MetaOapg.properties.SecurityType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Symbol", "SymbolName", "Exchange", "ExchangeName", "CurrentPrice", "CurrentPriceTime", "CurrentPriceChangeStatus", "CurrentPriceStatus", "CalcPrice", "PreviousClose", "PreviousCloseTime", "ChangePreviousClose", "ChangePreviousClosePer", "OpeningPrice", "OpeningPriceTime", "HighPrice", "HighPriceTime", "LowPrice", "LowPriceTime", "TradingVolume", "TradingVolumeTime", "VWAP", "TradingValue", "BidQty", "BidPrice", "BidTime", "BidSign", "MarketOrderSellQty", "Sell1", "Sell2", "Sell3", "Sell4", "Sell5", "Sell6", "Sell7", "Sell8", "Sell9", "Sell10", "AskQty", "AskPrice", "AskTime", "AskSign", "MarketOrderBuyQty", "Buy1", "Buy2", "Buy3", "Buy4", "Buy5", "Buy6", "Buy7", "Buy8", "Buy9", "Buy10", "OverSellQty", "UnderBuyQty", "TotalMarketValue", "ClearingPrice", "IV", "Gamma", "Theta", "Vega", "Delta", "SecurityType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Symbol: typing.Union[MetaOapg.properties.Symbol, str, schemas.Unset] = schemas.unset,
        SymbolName: typing.Union[MetaOapg.properties.SymbolName, str, schemas.Unset] = schemas.unset,
        Exchange: typing.Union[MetaOapg.properties.Exchange, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ExchangeName: typing.Union[MetaOapg.properties.ExchangeName, str, schemas.Unset] = schemas.unset,
        CurrentPrice: typing.Union[MetaOapg.properties.CurrentPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CurrentPriceTime: typing.Union[MetaOapg.properties.CurrentPriceTime, str, datetime, schemas.Unset] = schemas.unset,
        CurrentPriceChangeStatus: typing.Union[MetaOapg.properties.CurrentPriceChangeStatus, str, schemas.Unset] = schemas.unset,
        CurrentPriceStatus: typing.Union[MetaOapg.properties.CurrentPriceStatus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CalcPrice: typing.Union[MetaOapg.properties.CalcPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PreviousClose: typing.Union[MetaOapg.properties.PreviousClose, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PreviousCloseTime: typing.Union[MetaOapg.properties.PreviousCloseTime, str, datetime, schemas.Unset] = schemas.unset,
        ChangePreviousClose: typing.Union[MetaOapg.properties.ChangePreviousClose, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ChangePreviousClosePer: typing.Union[MetaOapg.properties.ChangePreviousClosePer, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        OpeningPrice: typing.Union[MetaOapg.properties.OpeningPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        OpeningPriceTime: typing.Union[MetaOapg.properties.OpeningPriceTime, str, datetime, schemas.Unset] = schemas.unset,
        HighPrice: typing.Union[MetaOapg.properties.HighPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        HighPriceTime: typing.Union[MetaOapg.properties.HighPriceTime, str, datetime, schemas.Unset] = schemas.unset,
        LowPrice: typing.Union[MetaOapg.properties.LowPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        LowPriceTime: typing.Union[MetaOapg.properties.LowPriceTime, str, datetime, schemas.Unset] = schemas.unset,
        TradingVolume: typing.Union[MetaOapg.properties.TradingVolume, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        TradingVolumeTime: typing.Union[MetaOapg.properties.TradingVolumeTime, str, datetime, schemas.Unset] = schemas.unset,
        VWAP: typing.Union[MetaOapg.properties.VWAP, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        TradingValue: typing.Union[MetaOapg.properties.TradingValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        BidQty: typing.Union[MetaOapg.properties.BidQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        BidPrice: typing.Union[MetaOapg.properties.BidPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        BidTime: typing.Union[MetaOapg.properties.BidTime, str, datetime, schemas.Unset] = schemas.unset,
        BidSign: typing.Union[MetaOapg.properties.BidSign, str, schemas.Unset] = schemas.unset,
        MarketOrderSellQty: typing.Union[MetaOapg.properties.MarketOrderSellQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Sell1: typing.Union[MetaOapg.properties.Sell1, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell2: typing.Union[MetaOapg.properties.Sell2, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell3: typing.Union[MetaOapg.properties.Sell3, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell4: typing.Union[MetaOapg.properties.Sell4, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell5: typing.Union[MetaOapg.properties.Sell5, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell6: typing.Union[MetaOapg.properties.Sell6, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell7: typing.Union[MetaOapg.properties.Sell7, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell8: typing.Union[MetaOapg.properties.Sell8, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell9: typing.Union[MetaOapg.properties.Sell9, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Sell10: typing.Union[MetaOapg.properties.Sell10, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        AskQty: typing.Union[MetaOapg.properties.AskQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        AskPrice: typing.Union[MetaOapg.properties.AskPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        AskTime: typing.Union[MetaOapg.properties.AskTime, str, datetime, schemas.Unset] = schemas.unset,
        AskSign: typing.Union[MetaOapg.properties.AskSign, str, schemas.Unset] = schemas.unset,
        MarketOrderBuyQty: typing.Union[MetaOapg.properties.MarketOrderBuyQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Buy1: typing.Union[MetaOapg.properties.Buy1, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy2: typing.Union[MetaOapg.properties.Buy2, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy3: typing.Union[MetaOapg.properties.Buy3, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy4: typing.Union[MetaOapg.properties.Buy4, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy5: typing.Union[MetaOapg.properties.Buy5, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy6: typing.Union[MetaOapg.properties.Buy6, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy7: typing.Union[MetaOapg.properties.Buy7, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy8: typing.Union[MetaOapg.properties.Buy8, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy9: typing.Union[MetaOapg.properties.Buy9, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        Buy10: typing.Union[MetaOapg.properties.Buy10, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        OverSellQty: typing.Union[MetaOapg.properties.OverSellQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        UnderBuyQty: typing.Union[MetaOapg.properties.UnderBuyQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        TotalMarketValue: typing.Union[MetaOapg.properties.TotalMarketValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ClearingPrice: typing.Union[MetaOapg.properties.ClearingPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        IV: typing.Union[MetaOapg.properties.IV, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Gamma: typing.Union[MetaOapg.properties.Gamma, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Theta: typing.Union[MetaOapg.properties.Theta, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Vega: typing.Union[MetaOapg.properties.Vega, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Delta: typing.Union[MetaOapg.properties.Delta, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        SecurityType: typing.Union[MetaOapg.properties.SecurityType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BoardSuccess':
        return super().__new__(
            cls,
            *_args,
            Symbol=Symbol,
            SymbolName=SymbolName,
            Exchange=Exchange,
            ExchangeName=ExchangeName,
            CurrentPrice=CurrentPrice,
            CurrentPriceTime=CurrentPriceTime,
            CurrentPriceChangeStatus=CurrentPriceChangeStatus,
            CurrentPriceStatus=CurrentPriceStatus,
            CalcPrice=CalcPrice,
            PreviousClose=PreviousClose,
            PreviousCloseTime=PreviousCloseTime,
            ChangePreviousClose=ChangePreviousClose,
            ChangePreviousClosePer=ChangePreviousClosePer,
            OpeningPrice=OpeningPrice,
            OpeningPriceTime=OpeningPriceTime,
            HighPrice=HighPrice,
            HighPriceTime=HighPriceTime,
            LowPrice=LowPrice,
            LowPriceTime=LowPriceTime,
            TradingVolume=TradingVolume,
            TradingVolumeTime=TradingVolumeTime,
            VWAP=VWAP,
            TradingValue=TradingValue,
            BidQty=BidQty,
            BidPrice=BidPrice,
            BidTime=BidTime,
            BidSign=BidSign,
            MarketOrderSellQty=MarketOrderSellQty,
            Sell1=Sell1,
            Sell2=Sell2,
            Sell3=Sell3,
            Sell4=Sell4,
            Sell5=Sell5,
            Sell6=Sell6,
            Sell7=Sell7,
            Sell8=Sell8,
            Sell9=Sell9,
            Sell10=Sell10,
            AskQty=AskQty,
            AskPrice=AskPrice,
            AskTime=AskTime,
            AskSign=AskSign,
            MarketOrderBuyQty=MarketOrderBuyQty,
            Buy1=Buy1,
            Buy2=Buy2,
            Buy3=Buy3,
            Buy4=Buy4,
            Buy5=Buy5,
            Buy6=Buy6,
            Buy7=Buy7,
            Buy8=Buy8,
            Buy9=Buy9,
            Buy10=Buy10,
            OverSellQty=OverSellQty,
            UnderBuyQty=UnderBuyQty,
            TotalMarketValue=TotalMarketValue,
            ClearingPrice=ClearingPrice,
            IV=IV,
            Gamma=Gamma,
            Theta=Theta,
            Vega=Vega,
            Delta=Delta,
            SecurityType=SecurityType,
            _configuration=_configuration,
            **kwargs,
        )
