# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrdersSuccess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.StrSchema
            State = schemas.Int32Schema
            OrderState = schemas.Int32Schema
            OrdType = schemas.Int32Schema
            RecvTime = schemas.StrSchema
            Symbol = schemas.StrSchema
            SymbolName = schemas.StrSchema
            Exchange = schemas.Int32Schema
            ExchangeName = schemas.StrSchema
            TimeInForce = schemas.Int32Schema
            Price = schemas.Float64Schema
            OrderQty = schemas.Float64Schema
            CumQty = schemas.Float64Schema
            Side = schemas.StrSchema
            CashMargin = schemas.Int32Schema
            AccountType = schemas.Int32Schema
            DelivType = schemas.Int32Schema
            ExpireDay = schemas.Int32Schema
            MarginTradeType = schemas.Int32Schema
            MarginPremium = schemas.Float64Schema
            
            
            class Details(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                SeqNum = schemas.Int32Schema
                                ID = schemas.StrSchema
                                RecType = schemas.Int32Schema
                                ExchangeID = schemas.StrSchema
                                State = schemas.Int32Schema
                                TransactTime = schemas.StrSchema
                                OrdType = schemas.Int32Schema
                                Price = schemas.Float64Schema
                                Qty = schemas.Float64Schema
                                ExecutionID = schemas.StrSchema
                                ExecutionDay = schemas.DateTimeSchema
                                DelivDay = schemas.Int32Schema
                                Commission = schemas.Float64Schema
                                CommissionTax = schemas.Float64Schema
                                __annotations__ = {
                                    "SeqNum": SeqNum,
                                    "ID": ID,
                                    "RecType": RecType,
                                    "ExchangeID": ExchangeID,
                                    "State": State,
                                    "TransactTime": TransactTime,
                                    "OrdType": OrdType,
                                    "Price": Price,
                                    "Qty": Qty,
                                    "ExecutionID": ExecutionID,
                                    "ExecutionDay": ExecutionDay,
                                    "DelivDay": DelivDay,
                                    "Commission": Commission,
                                    "CommissionTax": CommissionTax,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["SeqNum"]) -> MetaOapg.properties.SeqNum: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["RecType"]) -> MetaOapg.properties.RecType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ExchangeID"]) -> MetaOapg.properties.ExchangeID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["State"]) -> MetaOapg.properties.State: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["TransactTime"]) -> MetaOapg.properties.TransactTime: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["OrdType"]) -> MetaOapg.properties.OrdType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ExecutionID"]) -> MetaOapg.properties.ExecutionID: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ExecutionDay"]) -> MetaOapg.properties.ExecutionDay: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["DelivDay"]) -> MetaOapg.properties.DelivDay: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Commission"]) -> MetaOapg.properties.Commission: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["CommissionTax"]) -> MetaOapg.properties.CommissionTax: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["SeqNum", "ID", "RecType", "ExchangeID", "State", "TransactTime", "OrdType", "Price", "Qty", "ExecutionID", "ExecutionDay", "DelivDay", "Commission", "CommissionTax", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["SeqNum"]) -> typing.Union[MetaOapg.properties.SeqNum, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["RecType"]) -> typing.Union[MetaOapg.properties.RecType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ExchangeID"]) -> typing.Union[MetaOapg.properties.ExchangeID, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["State"]) -> typing.Union[MetaOapg.properties.State, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["TransactTime"]) -> typing.Union[MetaOapg.properties.TransactTime, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["OrdType"]) -> typing.Union[MetaOapg.properties.OrdType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> typing.Union[MetaOapg.properties.Qty, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ExecutionID"]) -> typing.Union[MetaOapg.properties.ExecutionID, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ExecutionDay"]) -> typing.Union[MetaOapg.properties.ExecutionDay, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["DelivDay"]) -> typing.Union[MetaOapg.properties.DelivDay, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Commission"]) -> typing.Union[MetaOapg.properties.Commission, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["CommissionTax"]) -> typing.Union[MetaOapg.properties.CommissionTax, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SeqNum", "ID", "RecType", "ExchangeID", "State", "TransactTime", "OrdType", "Price", "Qty", "ExecutionID", "ExecutionDay", "DelivDay", "Commission", "CommissionTax", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            SeqNum: typing.Union[MetaOapg.properties.SeqNum, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            ID: typing.Union[MetaOapg.properties.ID, str, schemas.Unset] = schemas.unset,
                            RecType: typing.Union[MetaOapg.properties.RecType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            ExchangeID: typing.Union[MetaOapg.properties.ExchangeID, str, schemas.Unset] = schemas.unset,
                            State: typing.Union[MetaOapg.properties.State, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            TransactTime: typing.Union[MetaOapg.properties.TransactTime, str, schemas.Unset] = schemas.unset,
                            OrdType: typing.Union[MetaOapg.properties.OrdType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            ExecutionID: typing.Union[MetaOapg.properties.ExecutionID, str, schemas.Unset] = schemas.unset,
                            ExecutionDay: typing.Union[MetaOapg.properties.ExecutionDay, str, datetime, schemas.Unset] = schemas.unset,
                            DelivDay: typing.Union[MetaOapg.properties.DelivDay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            Commission: typing.Union[MetaOapg.properties.Commission, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            CommissionTax: typing.Union[MetaOapg.properties.CommissionTax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                SeqNum=SeqNum,
                                ID=ID,
                                RecType=RecType,
                                ExchangeID=ExchangeID,
                                State=State,
                                TransactTime=TransactTime,
                                OrdType=OrdType,
                                Price=Price,
                                Qty=Qty,
                                ExecutionID=ExecutionID,
                                ExecutionDay=ExecutionDay,
                                DelivDay=DelivDay,
                                Commission=Commission,
                                CommissionTax=CommissionTax,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Details':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "ID": ID,
                "State": State,
                "OrderState": OrderState,
                "OrdType": OrdType,
                "RecvTime": RecvTime,
                "Symbol": Symbol,
                "SymbolName": SymbolName,
                "Exchange": Exchange,
                "ExchangeName": ExchangeName,
                "TimeInForce": TimeInForce,
                "Price": Price,
                "OrderQty": OrderQty,
                "CumQty": CumQty,
                "Side": Side,
                "CashMargin": CashMargin,
                "AccountType": AccountType,
                "DelivType": DelivType,
                "ExpireDay": ExpireDay,
                "MarginTradeType": MarginTradeType,
                "MarginPremium": MarginPremium,
                "Details": Details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["State"]) -> MetaOapg.properties.State: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderState"]) -> MetaOapg.properties.OrderState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrdType"]) -> MetaOapg.properties.OrdType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RecvTime"]) -> MetaOapg.properties.RecvTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Symbol"]) -> MetaOapg.properties.Symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SymbolName"]) -> MetaOapg.properties.SymbolName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Exchange"]) -> MetaOapg.properties.Exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExchangeName"]) -> MetaOapg.properties.ExchangeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TimeInForce"]) -> MetaOapg.properties.TimeInForce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderQty"]) -> MetaOapg.properties.OrderQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CumQty"]) -> MetaOapg.properties.CumQty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Side"]) -> MetaOapg.properties.Side: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CashMargin"]) -> MetaOapg.properties.CashMargin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountType"]) -> MetaOapg.properties.AccountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DelivType"]) -> MetaOapg.properties.DelivType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExpireDay"]) -> MetaOapg.properties.ExpireDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarginTradeType"]) -> MetaOapg.properties.MarginTradeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarginPremium"]) -> MetaOapg.properties.MarginPremium: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Details"]) -> MetaOapg.properties.Details: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID", "State", "OrderState", "OrdType", "RecvTime", "Symbol", "SymbolName", "Exchange", "ExchangeName", "TimeInForce", "Price", "OrderQty", "CumQty", "Side", "CashMargin", "AccountType", "DelivType", "ExpireDay", "MarginTradeType", "MarginPremium", "Details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["State"]) -> typing.Union[MetaOapg.properties.State, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderState"]) -> typing.Union[MetaOapg.properties.OrderState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrdType"]) -> typing.Union[MetaOapg.properties.OrdType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RecvTime"]) -> typing.Union[MetaOapg.properties.RecvTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Symbol"]) -> typing.Union[MetaOapg.properties.Symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SymbolName"]) -> typing.Union[MetaOapg.properties.SymbolName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Exchange"]) -> typing.Union[MetaOapg.properties.Exchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExchangeName"]) -> typing.Union[MetaOapg.properties.ExchangeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TimeInForce"]) -> typing.Union[MetaOapg.properties.TimeInForce, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> typing.Union[MetaOapg.properties.Price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderQty"]) -> typing.Union[MetaOapg.properties.OrderQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CumQty"]) -> typing.Union[MetaOapg.properties.CumQty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Side"]) -> typing.Union[MetaOapg.properties.Side, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CashMargin"]) -> typing.Union[MetaOapg.properties.CashMargin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountType"]) -> typing.Union[MetaOapg.properties.AccountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DelivType"]) -> typing.Union[MetaOapg.properties.DelivType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExpireDay"]) -> typing.Union[MetaOapg.properties.ExpireDay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarginTradeType"]) -> typing.Union[MetaOapg.properties.MarginTradeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarginPremium"]) -> typing.Union[MetaOapg.properties.MarginPremium, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Details"]) -> typing.Union[MetaOapg.properties.Details, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID", "State", "OrderState", "OrdType", "RecvTime", "Symbol", "SymbolName", "Exchange", "ExchangeName", "TimeInForce", "Price", "OrderQty", "CumQty", "Side", "CashMargin", "AccountType", "DelivType", "ExpireDay", "MarginTradeType", "MarginPremium", "Details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, str, schemas.Unset] = schemas.unset,
        State: typing.Union[MetaOapg.properties.State, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        OrderState: typing.Union[MetaOapg.properties.OrderState, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        OrdType: typing.Union[MetaOapg.properties.OrdType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        RecvTime: typing.Union[MetaOapg.properties.RecvTime, str, schemas.Unset] = schemas.unset,
        Symbol: typing.Union[MetaOapg.properties.Symbol, str, schemas.Unset] = schemas.unset,
        SymbolName: typing.Union[MetaOapg.properties.SymbolName, str, schemas.Unset] = schemas.unset,
        Exchange: typing.Union[MetaOapg.properties.Exchange, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ExchangeName: typing.Union[MetaOapg.properties.ExchangeName, str, schemas.Unset] = schemas.unset,
        TimeInForce: typing.Union[MetaOapg.properties.TimeInForce, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        OrderQty: typing.Union[MetaOapg.properties.OrderQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CumQty: typing.Union[MetaOapg.properties.CumQty, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Side: typing.Union[MetaOapg.properties.Side, str, schemas.Unset] = schemas.unset,
        CashMargin: typing.Union[MetaOapg.properties.CashMargin, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AccountType: typing.Union[MetaOapg.properties.AccountType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        DelivType: typing.Union[MetaOapg.properties.DelivType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ExpireDay: typing.Union[MetaOapg.properties.ExpireDay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        MarginTradeType: typing.Union[MetaOapg.properties.MarginTradeType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        MarginPremium: typing.Union[MetaOapg.properties.MarginPremium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Details: typing.Union[MetaOapg.properties.Details, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrdersSuccess':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            State=State,
            OrderState=OrderState,
            OrdType=OrdType,
            RecvTime=RecvTime,
            Symbol=Symbol,
            SymbolName=SymbolName,
            Exchange=Exchange,
            ExchangeName=ExchangeName,
            TimeInForce=TimeInForce,
            Price=Price,
            OrderQty=OrderQty,
            CumQty=CumQty,
            Side=Side,
            CashMargin=CashMargin,
            AccountType=AccountType,
            DelivType=DelivType,
            ExpireDay=ExpireDay,
            MarginTradeType=MarginTradeType,
            MarginPremium=MarginPremium,
            Details=Details,
            _configuration=_configuration,
            **kwargs,
        )
