# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RequestSendOrder(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "Exchange",
            "Side",
            "SecurityType",
            "FrontOrderType",
            "Price",
            "CashMargin",
            "ExpireDay",
            "Symbol",
            "Qty",
            "DelivType",
            "AccountType",
            "Password",
        }
        
        class properties:
            Password = schemas.StrSchema
            Symbol = schemas.StrSchema
            Exchange = schemas.Int32Schema
            SecurityType = schemas.Int32Schema
            Side = schemas.StrSchema
            CashMargin = schemas.Int32Schema
            DelivType = schemas.Int32Schema
            AccountType = schemas.Int32Schema
            Qty = schemas.Int32Schema
            FrontOrderType = schemas.Int32Schema
            Price = schemas.Float64Schema
            ExpireDay = schemas.Int32Schema
            MarginTradeType = schemas.Int32Schema
            MarginPremiumUnit = schemas.Float64Schema
            FundType = schemas.StrSchema
            ClosePositionOrder = schemas.Int32Schema
            
            
            class ClosePositions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Positions']:
                        return Positions
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Positions'], typing.List['Positions']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ClosePositions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Positions':
                    return super().__getitem__(i)
            
            
            class ReverseLimitOrder(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "AfterHitPrice",
                        "UnderOver",
                        "AfterHitOrderType",
                        "TriggerPrice",
                        "TriggerSec",
                    }
                    
                    class properties:
                        TriggerSec = schemas.Int32Schema
                        TriggerPrice = schemas.Float64Schema
                        UnderOver = schemas.Int32Schema
                        AfterHitOrderType = schemas.Int32Schema
                        AfterHitPrice = schemas.Float64Schema
                        __annotations__ = {
                            "TriggerSec": TriggerSec,
                            "TriggerPrice": TriggerPrice,
                            "UnderOver": UnderOver,
                            "AfterHitOrderType": AfterHitOrderType,
                            "AfterHitPrice": AfterHitPrice,
                        }
                
                AfterHitPrice: MetaOapg.properties.AfterHitPrice
                UnderOver: MetaOapg.properties.UnderOver
                AfterHitOrderType: MetaOapg.properties.AfterHitOrderType
                TriggerPrice: MetaOapg.properties.TriggerPrice
                TriggerSec: MetaOapg.properties.TriggerSec
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["TriggerSec"]) -> MetaOapg.properties.TriggerSec: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["TriggerPrice"]) -> MetaOapg.properties.TriggerPrice: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["UnderOver"]) -> MetaOapg.properties.UnderOver: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AfterHitOrderType"]) -> MetaOapg.properties.AfterHitOrderType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["AfterHitPrice"]) -> MetaOapg.properties.AfterHitPrice: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["TriggerSec", "TriggerPrice", "UnderOver", "AfterHitOrderType", "AfterHitPrice", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["TriggerSec"]) -> MetaOapg.properties.TriggerSec: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["TriggerPrice"]) -> MetaOapg.properties.TriggerPrice: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["UnderOver"]) -> MetaOapg.properties.UnderOver: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AfterHitOrderType"]) -> MetaOapg.properties.AfterHitOrderType: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["AfterHitPrice"]) -> MetaOapg.properties.AfterHitPrice: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TriggerSec", "TriggerPrice", "UnderOver", "AfterHitOrderType", "AfterHitPrice", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    AfterHitPrice: typing.Union[MetaOapg.properties.AfterHitPrice, decimal.Decimal, int, float, ],
                    UnderOver: typing.Union[MetaOapg.properties.UnderOver, decimal.Decimal, int, ],
                    AfterHitOrderType: typing.Union[MetaOapg.properties.AfterHitOrderType, decimal.Decimal, int, ],
                    TriggerPrice: typing.Union[MetaOapg.properties.TriggerPrice, decimal.Decimal, int, float, ],
                    TriggerSec: typing.Union[MetaOapg.properties.TriggerSec, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ReverseLimitOrder':
                    return super().__new__(
                        cls,
                        *_args,
                        AfterHitPrice=AfterHitPrice,
                        UnderOver=UnderOver,
                        AfterHitOrderType=AfterHitOrderType,
                        TriggerPrice=TriggerPrice,
                        TriggerSec=TriggerSec,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "Password": Password,
                "Symbol": Symbol,
                "Exchange": Exchange,
                "SecurityType": SecurityType,
                "Side": Side,
                "CashMargin": CashMargin,
                "DelivType": DelivType,
                "AccountType": AccountType,
                "Qty": Qty,
                "FrontOrderType": FrontOrderType,
                "Price": Price,
                "ExpireDay": ExpireDay,
                "MarginTradeType": MarginTradeType,
                "MarginPremiumUnit": MarginPremiumUnit,
                "FundType": FundType,
                "ClosePositionOrder": ClosePositionOrder,
                "ClosePositions": ClosePositions,
                "ReverseLimitOrder": ReverseLimitOrder,
            }
    
    Exchange: MetaOapg.properties.Exchange
    Side: MetaOapg.properties.Side
    SecurityType: MetaOapg.properties.SecurityType
    FrontOrderType: MetaOapg.properties.FrontOrderType
    Price: MetaOapg.properties.Price
    CashMargin: MetaOapg.properties.CashMargin
    ExpireDay: MetaOapg.properties.ExpireDay
    Symbol: MetaOapg.properties.Symbol
    Qty: MetaOapg.properties.Qty
    DelivType: MetaOapg.properties.DelivType
    AccountType: MetaOapg.properties.AccountType
    Password: MetaOapg.properties.Password
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Password"]) -> MetaOapg.properties.Password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Symbol"]) -> MetaOapg.properties.Symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Exchange"]) -> MetaOapg.properties.Exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SecurityType"]) -> MetaOapg.properties.SecurityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Side"]) -> MetaOapg.properties.Side: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CashMargin"]) -> MetaOapg.properties.CashMargin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DelivType"]) -> MetaOapg.properties.DelivType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccountType"]) -> MetaOapg.properties.AccountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FrontOrderType"]) -> MetaOapg.properties.FrontOrderType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExpireDay"]) -> MetaOapg.properties.ExpireDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarginTradeType"]) -> MetaOapg.properties.MarginTradeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarginPremiumUnit"]) -> MetaOapg.properties.MarginPremiumUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FundType"]) -> MetaOapg.properties.FundType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClosePositionOrder"]) -> MetaOapg.properties.ClosePositionOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClosePositions"]) -> MetaOapg.properties.ClosePositions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReverseLimitOrder"]) -> MetaOapg.properties.ReverseLimitOrder: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Password", "Symbol", "Exchange", "SecurityType", "Side", "CashMargin", "DelivType", "AccountType", "Qty", "FrontOrderType", "Price", "ExpireDay", "MarginTradeType", "MarginPremiumUnit", "FundType", "ClosePositionOrder", "ClosePositions", "ReverseLimitOrder", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Password"]) -> MetaOapg.properties.Password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Symbol"]) -> MetaOapg.properties.Symbol: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Exchange"]) -> MetaOapg.properties.Exchange: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SecurityType"]) -> MetaOapg.properties.SecurityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Side"]) -> MetaOapg.properties.Side: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CashMargin"]) -> MetaOapg.properties.CashMargin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DelivType"]) -> MetaOapg.properties.DelivType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccountType"]) -> MetaOapg.properties.AccountType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Qty"]) -> MetaOapg.properties.Qty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FrontOrderType"]) -> MetaOapg.properties.FrontOrderType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Price"]) -> MetaOapg.properties.Price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExpireDay"]) -> MetaOapg.properties.ExpireDay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarginTradeType"]) -> typing.Union[MetaOapg.properties.MarginTradeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarginPremiumUnit"]) -> typing.Union[MetaOapg.properties.MarginPremiumUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FundType"]) -> typing.Union[MetaOapg.properties.FundType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClosePositionOrder"]) -> typing.Union[MetaOapg.properties.ClosePositionOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClosePositions"]) -> typing.Union[MetaOapg.properties.ClosePositions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReverseLimitOrder"]) -> typing.Union[MetaOapg.properties.ReverseLimitOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Password", "Symbol", "Exchange", "SecurityType", "Side", "CashMargin", "DelivType", "AccountType", "Qty", "FrontOrderType", "Price", "ExpireDay", "MarginTradeType", "MarginPremiumUnit", "FundType", "ClosePositionOrder", "ClosePositions", "ReverseLimitOrder", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Exchange: typing.Union[MetaOapg.properties.Exchange, decimal.Decimal, int, ],
        Side: typing.Union[MetaOapg.properties.Side, str, ],
        SecurityType: typing.Union[MetaOapg.properties.SecurityType, decimal.Decimal, int, ],
        FrontOrderType: typing.Union[MetaOapg.properties.FrontOrderType, decimal.Decimal, int, ],
        Price: typing.Union[MetaOapg.properties.Price, decimal.Decimal, int, float, ],
        CashMargin: typing.Union[MetaOapg.properties.CashMargin, decimal.Decimal, int, ],
        ExpireDay: typing.Union[MetaOapg.properties.ExpireDay, decimal.Decimal, int, ],
        Symbol: typing.Union[MetaOapg.properties.Symbol, str, ],
        Qty: typing.Union[MetaOapg.properties.Qty, decimal.Decimal, int, ],
        DelivType: typing.Union[MetaOapg.properties.DelivType, decimal.Decimal, int, ],
        AccountType: typing.Union[MetaOapg.properties.AccountType, decimal.Decimal, int, ],
        Password: typing.Union[MetaOapg.properties.Password, str, ],
        MarginTradeType: typing.Union[MetaOapg.properties.MarginTradeType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        MarginPremiumUnit: typing.Union[MetaOapg.properties.MarginPremiumUnit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        FundType: typing.Union[MetaOapg.properties.FundType, str, schemas.Unset] = schemas.unset,
        ClosePositionOrder: typing.Union[MetaOapg.properties.ClosePositionOrder, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ClosePositions: typing.Union[MetaOapg.properties.ClosePositions, list, tuple, schemas.Unset] = schemas.unset,
        ReverseLimitOrder: typing.Union[MetaOapg.properties.ReverseLimitOrder, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequestSendOrder':
        return super().__new__(
            cls,
            *_args,
            Exchange=Exchange,
            Side=Side,
            SecurityType=SecurityType,
            FrontOrderType=FrontOrderType,
            Price=Price,
            CashMargin=CashMargin,
            ExpireDay=ExpireDay,
            Symbol=Symbol,
            Qty=Qty,
            DelivType=DelivType,
            AccountType=AccountType,
            Password=Password,
            MarginTradeType=MarginTradeType,
            MarginPremiumUnit=MarginPremiumUnit,
            FundType=FundType,
            ClosePositionOrder=ClosePositionOrder,
            ClosePositions=ClosePositions,
            ReverseLimitOrder=ReverseLimitOrder,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.positions import Positions
