# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RegulationsResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Symbol = schemas.StrSchema
            
            
            class RegulationsInfo(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                Exchange = schemas.Int32Schema
                                Product = schemas.Int32Schema
                                Side = schemas.StrSchema
                                Reason = schemas.StrSchema
                                LimitStartDay = schemas.StrSchema
                                LimitEndDay = schemas.StrSchema
                                Level = schemas.Int32Schema
                                __annotations__ = {
                                    "Exchange": Exchange,
                                    "Product": Product,
                                    "Side": Side,
                                    "Reason": Reason,
                                    "LimitStartDay": LimitStartDay,
                                    "LimitEndDay": LimitEndDay,
                                    "Level": Level,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Exchange"]) -> MetaOapg.properties.Exchange: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Product"]) -> MetaOapg.properties.Product: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Side"]) -> MetaOapg.properties.Side: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Reason"]) -> MetaOapg.properties.Reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["LimitStartDay"]) -> MetaOapg.properties.LimitStartDay: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["LimitEndDay"]) -> MetaOapg.properties.LimitEndDay: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Level"]) -> MetaOapg.properties.Level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["Exchange", "Product", "Side", "Reason", "LimitStartDay", "LimitEndDay", "Level", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Exchange"]) -> typing.Union[MetaOapg.properties.Exchange, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Product"]) -> typing.Union[MetaOapg.properties.Product, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Side"]) -> typing.Union[MetaOapg.properties.Side, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Reason"]) -> typing.Union[MetaOapg.properties.Reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["LimitStartDay"]) -> typing.Union[MetaOapg.properties.LimitStartDay, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["LimitEndDay"]) -> typing.Union[MetaOapg.properties.LimitEndDay, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Level"]) -> typing.Union[MetaOapg.properties.Level, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Exchange", "Product", "Side", "Reason", "LimitStartDay", "LimitEndDay", "Level", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            Exchange: typing.Union[MetaOapg.properties.Exchange, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            Product: typing.Union[MetaOapg.properties.Product, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            Side: typing.Union[MetaOapg.properties.Side, str, schemas.Unset] = schemas.unset,
                            Reason: typing.Union[MetaOapg.properties.Reason, str, schemas.Unset] = schemas.unset,
                            LimitStartDay: typing.Union[MetaOapg.properties.LimitStartDay, str, schemas.Unset] = schemas.unset,
                            LimitEndDay: typing.Union[MetaOapg.properties.LimitEndDay, str, schemas.Unset] = schemas.unset,
                            Level: typing.Union[MetaOapg.properties.Level, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                Exchange=Exchange,
                                Product=Product,
                                Side=Side,
                                Reason=Reason,
                                LimitStartDay=LimitStartDay,
                                LimitEndDay=LimitEndDay,
                                Level=Level,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'RegulationsInfo':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "Symbol": Symbol,
                "RegulationsInfo": RegulationsInfo,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Symbol"]) -> MetaOapg.properties.Symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RegulationsInfo"]) -> MetaOapg.properties.RegulationsInfo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Symbol", "RegulationsInfo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Symbol"]) -> typing.Union[MetaOapg.properties.Symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RegulationsInfo"]) -> typing.Union[MetaOapg.properties.RegulationsInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Symbol", "RegulationsInfo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Symbol: typing.Union[MetaOapg.properties.Symbol, str, schemas.Unset] = schemas.unset,
        RegulationsInfo: typing.Union[MetaOapg.properties.RegulationsInfo, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RegulationsResponse':
        return super().__new__(
            cls,
            *_args,
            Symbol=Symbol,
            RegulationsInfo=RegulationsInfo,
            _configuration=_configuration,
            **kwargs,
        )
