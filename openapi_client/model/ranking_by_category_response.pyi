# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RankingByCategoryResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Type = schemas.StrSchema
            ExchangeDivision = schemas.StrSchema
            
            
            class Ranking(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                _false = schemas.Int32Schema
                                Trend = schemas.StrSchema
                                AverageRanking = schemas.Float64Schema
                                Category = schemas.StrSchema
                                CategoryName = schemas.StrSchema
                                CurrentPrice = schemas.Float64Schema
                                ChangeRatio = schemas.Float64Schema
                                CurrentPriceTime = schemas.StrSchema
                                ChangePercentage = schemas.Float64Schema
                                __annotations__ = {
                                    "false": _false,
                                    "Trend": Trend,
                                    "AverageRanking": AverageRanking,
                                    "Category": Category,
                                    "CategoryName": CategoryName,
                                    "CurrentPrice": CurrentPrice,
                                    "ChangeRatio": ChangeRatio,
                                    "CurrentPriceTime": CurrentPriceTime,
                                    "ChangePercentage": ChangePercentage,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["false"]) -> MetaOapg.properties._false: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Trend"]) -> MetaOapg.properties.Trend: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["AverageRanking"]) -> MetaOapg.properties.AverageRanking: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["Category"]) -> MetaOapg.properties.Category: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["CategoryName"]) -> MetaOapg.properties.CategoryName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["CurrentPrice"]) -> MetaOapg.properties.CurrentPrice: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ChangeRatio"]) -> MetaOapg.properties.ChangeRatio: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["CurrentPriceTime"]) -> MetaOapg.properties.CurrentPriceTime: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ChangePercentage"]) -> MetaOapg.properties.ChangePercentage: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["false", "Trend", "AverageRanking", "Category", "CategoryName", "CurrentPrice", "ChangeRatio", "CurrentPriceTime", "ChangePercentage", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["false"]) -> typing.Union[MetaOapg.properties._false, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Trend"]) -> typing.Union[MetaOapg.properties.Trend, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["AverageRanking"]) -> typing.Union[MetaOapg.properties.AverageRanking, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["Category"]) -> typing.Union[MetaOapg.properties.Category, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["CategoryName"]) -> typing.Union[MetaOapg.properties.CategoryName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["CurrentPrice"]) -> typing.Union[MetaOapg.properties.CurrentPrice, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ChangeRatio"]) -> typing.Union[MetaOapg.properties.ChangeRatio, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["CurrentPriceTime"]) -> typing.Union[MetaOapg.properties.CurrentPriceTime, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ChangePercentage"]) -> typing.Union[MetaOapg.properties.ChangePercentage, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["false", "Trend", "AverageRanking", "Category", "CategoryName", "CurrentPrice", "ChangeRatio", "CurrentPriceTime", "ChangePercentage", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            Trend: typing.Union[MetaOapg.properties.Trend, str, schemas.Unset] = schemas.unset,
                            AverageRanking: typing.Union[MetaOapg.properties.AverageRanking, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            Category: typing.Union[MetaOapg.properties.Category, str, schemas.Unset] = schemas.unset,
                            CategoryName: typing.Union[MetaOapg.properties.CategoryName, str, schemas.Unset] = schemas.unset,
                            CurrentPrice: typing.Union[MetaOapg.properties.CurrentPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            ChangeRatio: typing.Union[MetaOapg.properties.ChangeRatio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            CurrentPriceTime: typing.Union[MetaOapg.properties.CurrentPriceTime, str, schemas.Unset] = schemas.unset,
                            ChangePercentage: typing.Union[MetaOapg.properties.ChangePercentage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                Trend=Trend,
                                AverageRanking=AverageRanking,
                                Category=Category,
                                CategoryName=CategoryName,
                                CurrentPrice=CurrentPrice,
                                ChangeRatio=ChangeRatio,
                                CurrentPriceTime=CurrentPriceTime,
                                ChangePercentage=ChangePercentage,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Ranking':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "Type": Type,
                "ExchangeDivision": ExchangeDivision,
                "Ranking": Ranking,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExchangeDivision"]) -> MetaOapg.properties.ExchangeDivision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Ranking"]) -> MetaOapg.properties.Ranking: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type", "ExchangeDivision", "Ranking", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union[MetaOapg.properties.Type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExchangeDivision"]) -> typing.Union[MetaOapg.properties.ExchangeDivision, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Ranking"]) -> typing.Union[MetaOapg.properties.Ranking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type", "ExchangeDivision", "Ranking", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Type: typing.Union[MetaOapg.properties.Type, str, schemas.Unset] = schemas.unset,
        ExchangeDivision: typing.Union[MetaOapg.properties.ExchangeDivision, str, schemas.Unset] = schemas.unset,
        Ranking: typing.Union[MetaOapg.properties.Ranking, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RankingByCategoryResponse':
        return super().__new__(
            cls,
            *_args,
            Type=Type,
            ExchangeDivision=ExchangeDivision,
            Ranking=Ranking,
            _configuration=_configuration,
            **kwargs,
        )
