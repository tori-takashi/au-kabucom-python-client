# coding: utf-8

"""
    kabuステーションAPI

    # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)  # noqa: E501

    The version of the OpenAPI document: 1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SymbolSuccess(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Symbol = schemas.StrSchema
            SymbolName = schemas.StrSchema
            DisplayName = schemas.StrSchema
            Exchange = schemas.Int32Schema
            ExchangeName = schemas.StrSchema
            BisCategory = schemas.StrSchema
            TotalMarketValue = schemas.Float64Schema
            TotalStocks = schemas.Float64Schema
            TradingUnit = schemas.Float64Schema
            FiscalYearEndBasic = schemas.Int32Schema
            PriceRangeGroup = schemas.StrSchema
            KCMarginBuy = schemas.BoolSchema
            KCMarginSell = schemas.BoolSchema
            MarginBuy = schemas.BoolSchema
            MarginSell = schemas.BoolSchema
            UpperLimit = schemas.Float64Schema
            LowerLimit = schemas.Float64Schema
            Underlyer = schemas.StrSchema
            DerivMonth = schemas.StrSchema
            TradeStart = schemas.Int32Schema
            TradeEnd = schemas.Int32Schema
            StrikePrice = schemas.Float64Schema
            PutOrCall = schemas.Int32Schema
            ClearingPrice = schemas.Float64Schema
            __annotations__ = {
                "Symbol": Symbol,
                "SymbolName": SymbolName,
                "DisplayName": DisplayName,
                "Exchange": Exchange,
                "ExchangeName": ExchangeName,
                "BisCategory": BisCategory,
                "TotalMarketValue": TotalMarketValue,
                "TotalStocks": TotalStocks,
                "TradingUnit": TradingUnit,
                "FiscalYearEndBasic": FiscalYearEndBasic,
                "PriceRangeGroup": PriceRangeGroup,
                "KCMarginBuy": KCMarginBuy,
                "KCMarginSell": KCMarginSell,
                "MarginBuy": MarginBuy,
                "MarginSell": MarginSell,
                "UpperLimit": UpperLimit,
                "LowerLimit": LowerLimit,
                "Underlyer": Underlyer,
                "DerivMonth": DerivMonth,
                "TradeStart": TradeStart,
                "TradeEnd": TradeEnd,
                "StrikePrice": StrikePrice,
                "PutOrCall": PutOrCall,
                "ClearingPrice": ClearingPrice,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Symbol"]) -> MetaOapg.properties.Symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SymbolName"]) -> MetaOapg.properties.SymbolName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DisplayName"]) -> MetaOapg.properties.DisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Exchange"]) -> MetaOapg.properties.Exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExchangeName"]) -> MetaOapg.properties.ExchangeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BisCategory"]) -> MetaOapg.properties.BisCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TotalMarketValue"]) -> MetaOapg.properties.TotalMarketValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TotalStocks"]) -> MetaOapg.properties.TotalStocks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TradingUnit"]) -> MetaOapg.properties.TradingUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FiscalYearEndBasic"]) -> MetaOapg.properties.FiscalYearEndBasic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PriceRangeGroup"]) -> MetaOapg.properties.PriceRangeGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["KCMarginBuy"]) -> MetaOapg.properties.KCMarginBuy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["KCMarginSell"]) -> MetaOapg.properties.KCMarginSell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarginBuy"]) -> MetaOapg.properties.MarginBuy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MarginSell"]) -> MetaOapg.properties.MarginSell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UpperLimit"]) -> MetaOapg.properties.UpperLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LowerLimit"]) -> MetaOapg.properties.LowerLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Underlyer"]) -> MetaOapg.properties.Underlyer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DerivMonth"]) -> MetaOapg.properties.DerivMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TradeStart"]) -> MetaOapg.properties.TradeStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TradeEnd"]) -> MetaOapg.properties.TradeEnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StrikePrice"]) -> MetaOapg.properties.StrikePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PutOrCall"]) -> MetaOapg.properties.PutOrCall: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClearingPrice"]) -> MetaOapg.properties.ClearingPrice: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Symbol", "SymbolName", "DisplayName", "Exchange", "ExchangeName", "BisCategory", "TotalMarketValue", "TotalStocks", "TradingUnit", "FiscalYearEndBasic", "PriceRangeGroup", "KCMarginBuy", "KCMarginSell", "MarginBuy", "MarginSell", "UpperLimit", "LowerLimit", "Underlyer", "DerivMonth", "TradeStart", "TradeEnd", "StrikePrice", "PutOrCall", "ClearingPrice", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Symbol"]) -> typing.Union[MetaOapg.properties.Symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SymbolName"]) -> typing.Union[MetaOapg.properties.SymbolName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DisplayName"]) -> typing.Union[MetaOapg.properties.DisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Exchange"]) -> typing.Union[MetaOapg.properties.Exchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExchangeName"]) -> typing.Union[MetaOapg.properties.ExchangeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BisCategory"]) -> typing.Union[MetaOapg.properties.BisCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TotalMarketValue"]) -> typing.Union[MetaOapg.properties.TotalMarketValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TotalStocks"]) -> typing.Union[MetaOapg.properties.TotalStocks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TradingUnit"]) -> typing.Union[MetaOapg.properties.TradingUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FiscalYearEndBasic"]) -> typing.Union[MetaOapg.properties.FiscalYearEndBasic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PriceRangeGroup"]) -> typing.Union[MetaOapg.properties.PriceRangeGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["KCMarginBuy"]) -> typing.Union[MetaOapg.properties.KCMarginBuy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["KCMarginSell"]) -> typing.Union[MetaOapg.properties.KCMarginSell, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarginBuy"]) -> typing.Union[MetaOapg.properties.MarginBuy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MarginSell"]) -> typing.Union[MetaOapg.properties.MarginSell, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UpperLimit"]) -> typing.Union[MetaOapg.properties.UpperLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LowerLimit"]) -> typing.Union[MetaOapg.properties.LowerLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Underlyer"]) -> typing.Union[MetaOapg.properties.Underlyer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DerivMonth"]) -> typing.Union[MetaOapg.properties.DerivMonth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TradeStart"]) -> typing.Union[MetaOapg.properties.TradeStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TradeEnd"]) -> typing.Union[MetaOapg.properties.TradeEnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StrikePrice"]) -> typing.Union[MetaOapg.properties.StrikePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PutOrCall"]) -> typing.Union[MetaOapg.properties.PutOrCall, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClearingPrice"]) -> typing.Union[MetaOapg.properties.ClearingPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Symbol", "SymbolName", "DisplayName", "Exchange", "ExchangeName", "BisCategory", "TotalMarketValue", "TotalStocks", "TradingUnit", "FiscalYearEndBasic", "PriceRangeGroup", "KCMarginBuy", "KCMarginSell", "MarginBuy", "MarginSell", "UpperLimit", "LowerLimit", "Underlyer", "DerivMonth", "TradeStart", "TradeEnd", "StrikePrice", "PutOrCall", "ClearingPrice", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Symbol: typing.Union[MetaOapg.properties.Symbol, str, schemas.Unset] = schemas.unset,
        SymbolName: typing.Union[MetaOapg.properties.SymbolName, str, schemas.Unset] = schemas.unset,
        DisplayName: typing.Union[MetaOapg.properties.DisplayName, str, schemas.Unset] = schemas.unset,
        Exchange: typing.Union[MetaOapg.properties.Exchange, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ExchangeName: typing.Union[MetaOapg.properties.ExchangeName, str, schemas.Unset] = schemas.unset,
        BisCategory: typing.Union[MetaOapg.properties.BisCategory, str, schemas.Unset] = schemas.unset,
        TotalMarketValue: typing.Union[MetaOapg.properties.TotalMarketValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        TotalStocks: typing.Union[MetaOapg.properties.TotalStocks, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        TradingUnit: typing.Union[MetaOapg.properties.TradingUnit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        FiscalYearEndBasic: typing.Union[MetaOapg.properties.FiscalYearEndBasic, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PriceRangeGroup: typing.Union[MetaOapg.properties.PriceRangeGroup, str, schemas.Unset] = schemas.unset,
        KCMarginBuy: typing.Union[MetaOapg.properties.KCMarginBuy, bool, schemas.Unset] = schemas.unset,
        KCMarginSell: typing.Union[MetaOapg.properties.KCMarginSell, bool, schemas.Unset] = schemas.unset,
        MarginBuy: typing.Union[MetaOapg.properties.MarginBuy, bool, schemas.Unset] = schemas.unset,
        MarginSell: typing.Union[MetaOapg.properties.MarginSell, bool, schemas.Unset] = schemas.unset,
        UpperLimit: typing.Union[MetaOapg.properties.UpperLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        LowerLimit: typing.Union[MetaOapg.properties.LowerLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Underlyer: typing.Union[MetaOapg.properties.Underlyer, str, schemas.Unset] = schemas.unset,
        DerivMonth: typing.Union[MetaOapg.properties.DerivMonth, str, schemas.Unset] = schemas.unset,
        TradeStart: typing.Union[MetaOapg.properties.TradeStart, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TradeEnd: typing.Union[MetaOapg.properties.TradeEnd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        StrikePrice: typing.Union[MetaOapg.properties.StrikePrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PutOrCall: typing.Union[MetaOapg.properties.PutOrCall, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ClearingPrice: typing.Union[MetaOapg.properties.ClearingPrice, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SymbolSuccess':
        return super().__new__(
            cls,
            *_args,
            Symbol=Symbol,
            SymbolName=SymbolName,
            DisplayName=DisplayName,
            Exchange=Exchange,
            ExchangeName=ExchangeName,
            BisCategory=BisCategory,
            TotalMarketValue=TotalMarketValue,
            TotalStocks=TotalStocks,
            TradingUnit=TradingUnit,
            FiscalYearEndBasic=FiscalYearEndBasic,
            PriceRangeGroup=PriceRangeGroup,
            KCMarginBuy=KCMarginBuy,
            KCMarginSell=KCMarginSell,
            MarginBuy=MarginBuy,
            MarginSell=MarginSell,
            UpperLimit=UpperLimit,
            LowerLimit=LowerLimit,
            Underlyer=Underlyer,
            DerivMonth=DerivMonth,
            TradeStart=TradeStart,
            TradeEnd=TradeEnd,
            StrikePrice=StrikePrice,
            PutOrCall=PutOrCall,
            ClearingPrice=ClearingPrice,
            _configuration=_configuration,
            **kwargs,
        )
